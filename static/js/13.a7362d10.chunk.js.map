{"version":3,"sources":["redux/actions/cartActions.js","views/checkoutPage/CheckoutPage.js"],"names":["createCart","cart","carts","JSON","parse","localStorage","getItem","setItem","stringify","type","types","CREATE_CART","addItem","newCarts","map","c","email","products","ADD_ITEM","incrementItem","id","updateProduct","p","productId","productName","productPrice","number","INCREMENT_ITEM","decrementItem","DECREMENT_ITEM","removeItem","filter","REMOVE_ITEM","emptyCart","EMPTY_CART","mapStateToProps","createStructuredSelector","user","userProducts","connect","submitOrder","credit","price","Number","total","history","useHistory","useState","notEnoughCredit","setNotEnoughCredit","className","style","color","to","width","onClick","order","date","Date","toLocaleString","push"],"mappings":"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","file":"static/js/13.a7362d10.chunk.js","sourcesContent":["import types from '../types/cartTypes'\r\n\r\nexport const createCart = cart => {\r\n  const carts = JSON.parse(localStorage.getItem(\"carts\"))\r\n  localStorage.setItem(\"carts\", JSON.stringify([...carts, cart]))\r\n  return {\r\n    type: types.CREATE_CART,\r\n    cart\r\n  }\r\n}\r\n\r\nexport const addItem = cart => {\r\n  const carts = JSON.parse(localStorage.getItem(\"carts\"))\r\n  const newCarts = carts.map(c => (\r\n    c.email === cart.email ?\r\n      {\r\n        email: cart.email,\r\n        products: [...c.products, cart.products[0]]\r\n      } : c\r\n  ))\r\n  localStorage.setItem(\"carts\", JSON.stringify(newCarts))\r\n\r\n  return {\r\n    type: types.ADD_ITEM,\r\n    cart\r\n  }\r\n}\r\n\r\nexport const incrementItem = (email, id) => {\r\n  const updateProduct = p => {\r\n    return p.productId === id ?\r\n      {\r\n        productId: p.productId,\r\n        productName: p.productName,\r\n        productPrice: p.productPrice,\r\n        number: p.number + 1\r\n      } : p\r\n  }\r\n\r\n  const carts = JSON.parse(localStorage.getItem(\"carts\"))\r\n  const newCarts = carts.map(c => {\r\n    return c.email === email ?\r\n      {\r\n        email: email,\r\n        products: c.products.map(updateProduct)\r\n      } : c\r\n  })\r\n  localStorage.setItem(\"carts\", JSON.stringify(newCarts))\r\n\r\n  return {\r\n    type: types.INCREMENT_ITEM,\r\n    email,\r\n    id\r\n  }\r\n}\r\n\r\nexport const decrementItem = (email, id) => {\r\n  const updateProduct = p => {\r\n    return p.productId === id ?\r\n      {\r\n        productId: p.productId,\r\n        productName: p.productName,\r\n        productPrice: p.productPrice,\r\n        number: p.number - 1\r\n      } : p\r\n  }\r\n\r\n  const carts = JSON.parse(localStorage.getItem(\"carts\"))\r\n  const newCarts = carts.map(c => {\r\n    return c.email === email ?\r\n      {\r\n        email: email,\r\n        products: c.products.map(updateProduct)\r\n      } : c\r\n  })\r\n  localStorage.setItem(\"carts\", JSON.stringify(newCarts))\r\n\r\n  return {\r\n    type: types.DECREMENT_ITEM,\r\n    email,\r\n    id\r\n  }\r\n}\r\n\r\nexport const removeItem = (email, id) => {\r\n  const carts = JSON.parse(localStorage.getItem(\"carts\"))\r\n  const newCarts = carts.map(c => {\r\n    return c.email === email ?\r\n      {\r\n        email: email,\r\n        products: c.products.filter(p => p.productId !== id)\r\n      }\r\n      :\r\n      c\r\n  })\r\n  localStorage.setItem(\"carts\", JSON.stringify(newCarts))\r\n\r\n  return {\r\n    type: types.REMOVE_ITEM,\r\n    email,\r\n    id\r\n  }\r\n}\r\n\r\nexport const emptyCart = email => {\r\n  const carts = JSON.parse(localStorage.getItem(\"carts\"))\r\n  const newCarts = carts.map(c => {\r\n    return c.email === email ?\r\n      {\r\n        ...c,\r\n        products: []\r\n      } : c\r\n  })\r\n  localStorage.setItem(\"carts\", JSON.stringify(newCarts))\r\n\r\n  return {\r\n    type: types.EMPTY_CART,\r\n    email\r\n  }\r\n}","import React, { useState } from \"react\"\r\nimport \"./CheckoutPage.scss\"\r\nimport SubmitButton from \"../../components/buttons/submitButton/SubmitButton\"\r\nimport { connect } from \"react-redux\"\r\nimport { createStructuredSelector } from \"reselect\"\r\nimport { userProducts } from \"../../redux/selectors/cartSelector\"\r\nimport { user } from \"../../redux/selectors/userSelectors\"\r\nimport { useHistory } from \"react-router-dom\"\r\nimport { submitOrder } from \"../../redux/actions/userActions\"\r\nimport { emptyCart } from \"../../redux/actions/cartActions\"\r\nimport { NavLink } from \"react-router-dom\"\r\nimport { Container } from \"reactstrap\"\r\n\r\nconst CheckoutPage = ({ userProducts, user, submitOrder, emptyCart }) => {\r\n  const credit = user.credit\r\n  let price = 0\r\n  for (let p of userProducts)\r\n    price += p.number * Number(p.productPrice)\r\n  const total = credit - price\r\n  const history = useHistory()\r\n  const [notEnoughCredit, setNotEnoughCredit] = useState(false)\r\n\r\n  const handleSubmit = () => {\r\n    if (total < 0)\r\n      return setNotEnoughCredit(true)\r\n\r\n    const order = {\r\n      products: userProducts,\r\n      date: new Date().toLocaleString()\r\n    }\r\n\r\n    submitOrder(user.email, order, price)\r\n    emptyCart(user.email)\r\n    history.push(\"/user/orders\")\r\n  }\r\n\r\n  return (\r\n    <div className=\"checkout-wrapper\">\r\n      <Container className=\"checkout-content\">\r\n        <div className=\"cash\">\r\n          <span>موجودی</span>\r\n          <span>{credit} تومان</span>\r\n        </div>\r\n        <div className=\"price\">\r\n          <span>هزینه کل محصولات</span>\r\n          <span>{price} تومان</span>\r\n        </div>\r\n        <div className=\"total\">\r\n          <span>اعتبار باقی مانده</span>\r\n          {\r\n            total < 0 &&\r\n            <span style={{ color: \"red\" }}>{-total}- تومان</span>\r\n          }\r\n          {\r\n            total >= 0 &&\r\n            <span style={{ color: \"blue\" }}>تومان {total}</span>\r\n          }\r\n        </div>\r\n        {\r\n          notEnoughCredit && \r\n          <div className=\"not-enough-credit\">\r\n            اعتبار شما کافی نیست برای افزایش اعتبار <NavLink to=\"/user/credit\">لینک+</NavLink> را کلیک کنید\r\n          </div>\r\n        }\r\n        <SubmitButton\r\n          style={{ width: \"100%\" }}\r\n          onClick={handleSubmit}\r\n        >\r\n          ارسال سفارش\r\n        </SubmitButton>\r\n      </Container>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n  user,\r\n  userProducts\r\n})\r\n\r\nexport default connect(mapStateToProps, { submitOrder, emptyCart })(CheckoutPage)"],"sourceRoot":""}